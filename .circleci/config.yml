# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2.1

orbs:
  discord: antonioned/discord@0.1.0
  jira: circleci/jira@1.3.1

jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: cimg/php:8.1

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer update
      - run:
          name: "Install Dependencies"
          command: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      # prepare the database
      - run:
          name: "Create Environment file and generate app key"
          command: |
            mv .env.testing .env
            php artisan key:generate

      - run:
          name: "Create database and run migration"
          command: |
            touch database/database.sqlite
            php artisan migrate --env=testing

      - run:
          name: "Generate Passport encryption keys"
          command: php artisan passport:install

      # run tests with phpunit
      - run:
          name: "Run Tests"
          command: ./vendor/bin/phpunit

      # send discord webhook
      - discord/status:
          fail_only: true
          failure_message: "Unit and feature testing for ${CIRCLE_USERNAME}'s build in ${CIRCLE_BRANCH}: ${CIRCLE_JOB} failed."
          webhook: "${discord_webhook}"
  test-dusk:
    docker:
      # Specify the version you desire here
      - image: cimg/php:8.1-browsers

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer update
      - run:
          name: "Install Dependencies"
          command: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      # prepare the database
      - run:
          name: "Create Environment file and generate app key"
          command: |
            mv .env.testing .env
            php artisan key:generate

      - run:
          name: "Create database and run migration"
          command: |
            touch database/database.sqlite
            php artisan migrate --env=testing

      - run:
          name: "Install Dusk and Update Chrome Drivers"
          command: |
            composer require --dev laravel/dusk
            php artisan dusk:chrome-driver

      # - run:
      #     name: Start Chrome Driver
      #     command: ./vendor/laravel/dusk/bin/chromedriver-linux
      #     background: true

      - run:
          name: Run Laravel Server
          command: php artisan serve
          background: true

      - run:
          name: Run Browser Tests Tests
          command: php artisan dusk

      # send discord webhook
      - discord/status:
          fail_only: true
          failure_message: "Dusk testing for ${CIRCLE_USERNAME}'s build in ${CIRCLE_BRANCH}: ${CIRCLE_JOB} failed."
          webhook: "${discord_webhook}"

  deploy-main:
    docker:
      - image: cimg/node:12.22-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - run: npm install
      - run: git status
      - run:
          name: Deploy main branch on remote ftp server
          command: |
            sudo apt-get update
            sudo apt-get -qq install git-ftp
            echo "Deploying project to ftp server..."
            git ftp push --user "${username_prod}" --passwd "${password_prod}" ${ftp_server_prod}/${ftp_location_prod}
      - run:
          name: Restart Laravel project
          command: |
            sudo apt-get -qq install sshpass
            echo "Restarting artisan"
            sshpass -p "${password_prod}" -v ssh -o StrictHostKeyChecking=no ${username_prod}@${ftp_server_prod} -p ${ssh_port_prod} "cd ${ftp_location_prod}; composer update -W; npm install; php artisan optimize:clear; exit"
  deploy-staging:
    docker:
      - image: circleci/node:8-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - run: npm install
      - run: git status
      - run:
          name: Deploy development branch on remote ftp server
          command: |
            sudo apt-get update
            sudo apt-get -qq install git-ftp
            echo "Deploying project to ftp server..."
            git ftp push --user "${username_dev}" --passwd "${password_dev}" ${ftp_server_dev}/${ftp_location_dev}
      - run:
          name: Restart Laravel project
          command: |
            sudo apt-get -qq install sshpass
            echo "Restarting artisan"
            sshpass -p "${password_dev}" -v ssh -o StrictHostKeyChecking=no ${username_dev}@${ftp_server_dev} -p ${ssh_port_prod} "cd ${ftp_location_dev}; composer update -W; npm install; php artisan migrate:fresh --seed; php artisan optimize:clear; exit"

      # send discord webhook
      - discord/status:
          fail_only: false
          failure_message: "${CIRCLE_USERNAME}'s build: ${CIRCLE_JOB} failed."
          webhook: "${discord_webhook}"
          success_message: "${CIRCLE_USERNAME} deployed ${CIRCLE_BRANCH} to a live environment."

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - test-dusk:
          requires:
            - build
          post-steps:
            - jira/notify:
                environment_type: development
                job_type: build
      - deploy-main:
          filters:
            branches:
              only: main
          requires:
            - test-dusk
          post-steps:
            - jira/notify:
                environment_type: staging
                job_type: deployment
      - deploy-staging:
          filters:
            branches:
              only: development
          requires:
            - test-dusk
          post-steps:
            - jira/notify:
                environment_type: production
                job_type: deployment
